{
    "data_ver1.pdf": {
        "pdf_id": "data_ver1.pdf",
        "headers": [
            {
                "text": "What Are Algorithms?",
                "page_num": 1,
                "section_text": [
                    " An algorithm is a clearly defined sequence of instructions used to solve problems or perform tasks. Algorithms are the foundation of all programming and computing operations.",
                    " Time Complexity: This measures the time it takes for an algorithm to run, depending on the size of the input data. Common examples include:",
                    " O(1): Constant time",
                    " O(n): Linear time",
                    " O(n\u00b2): Quadratic time",
                    " Space Complexity: This measures how much memory the algorithm requires as the input size increases."
                ]
            },
            {
                "text": "Types of Data Structures",
                "page_num": 1,
                "section_text": [
                    " Data structures refer to various ways of organizing and storing data, allowing efficient access and modification of the data.",
                    " Arrays: A linear collection of elements, where each element is stored in contiguous memory. Arrays allow fast access to elements by their index.",
                    " Linked Lists: A sequence of nodes, where each node holds data and a reference to the next node. They allow dynamic resizing and efficient insertions or deletions."
                ]
            },
            {
                "text": "Common Sorting Techniques",
                "page_num": 1,
                "section_text": [
                    " Sorting algorithms are methods to rearrange data in a specific order, such as ascending or descending. Two popular sorting algorithms are:",
                    " Bubble Sort: Repeatedly swaps adjacent elements if they are in the wrong order. Time complexity: O(n\u00b2).",
                    " Merge Sort: A divide-and-conquer algorithm that splits the array into halves, recursively sorts them, and merges them back together. Time complexity: O(n log n)."
                ]
            },
            {
                "text": "Searching Methods",
                "page_num": 1,
                "section_text": [
                    " Searching algorithms help find specific elements in a data structure. Two common methods include:",
                    " Linear Search: Iterates through each element one by one to find the target. Time complexity: O(n).",
                    " Binary Search: Efficiently finds elements in a sorted array by halving the search space at each step. Time complexity: O(log n)."
                ]
            }
        ]
    },
    "data_ver2.pdf": {
        "pdf_id": "data_ver2.pdf",
        "headers": [
            {
                "text": "1. Introduction to Algorithms",
                "page_num": 1,
                "section_text": [
                    " An algorithm is a step-by-step method for solving problems or completing tasks. They are at the heart of software development and computational problem-solving.",
                    " Time Complexity: Refers to how long an algorithm takes to execute as the input size changes. Examples of common complexities are:",
                    " O(1): Constant execution time",
                    " O(n): Execution time grows linearly with input size",
                    " O(n\u00b2): Execution time grows quadratically",
                    " Space Complexity: This measures the memory usage of an algorithm relative to the input size."
                ]
            },
            {
                "text": "2. Common Data Structures",
                "page_num": 1,
                "section_text": [
                    " Data structures are frameworks used to store and manage data, optimizing access and modifications.",
                    " Arrays: Ordered collections of elements stored in contiguous memory. Arrays offer constant-time element access but require resizing to accommodate larger data.",
                    " Linked Lists: Composed of nodes, where each node holds data and a link to the next node. Linked lists allow dynamic sizing and are ideal for scenarios where data is frequently added or removed."
                ]
            },
            {
                "text": "3. Popular Sorting Algorithms",
                "page_num": 1,
                "section_text": [
                    " Sorting algorithms reorder data in a specified way, typically in ascending or descending order. Common sorting algorithms include:",
                    " Bubble Sort: This algorithm compares and swaps adjacent elements repeatedly until the entire list is sorted. Time complexity: O(n\u00b2).",
                    " Merge Sort: It uses a divide-and-conquer approach to split data into smaller arrays, sort them, and then merge them back together. Time complexity: O(n log n)."
                ]
            },
            {
                "text": "4. Efficient Search Techniques",
                "page_num": 1,
                "section_text": [
                    " Search algorithms are used to locate elements in data structures. Two widely used search algorithms are:",
                    " Linear Search: Sequentially examines each element in a list until the target value is found. Time complexity: O(n).",
                    " Binary Search: This algorithm works on sorted arrays, repeatedly dividing the search range in half until the target value is found. Time complexity: O(log n)."
                ]
            }
        ]
    }
}